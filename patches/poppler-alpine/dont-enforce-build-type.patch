diff --git a/cmake/modules/PopplerMacros.cmake b/cmake/modules/PopplerMacros.cmake
index 2aed028..fdbe318 100644
--- a/cmake/modules/PopplerMacros.cmake
+++ b/cmake/modules/PopplerMacros.cmake
@@ -75,21 +75,6 @@ if(WIN32)
                                 "${CMAKE_INSTALL_PREFIX}/bin" )
 endif(WIN32)
 
-if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
-  set(CMAKE_BUILD_TYPE RelWithDebInfo)
-endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
-
-string(TOUPPER "${CMAKE_BUILD_TYPE}" _CMAKE_BUILD_TYPE_UPPER)
-set(_known_build_types RELWITHDEBINFO;RELEASE;DEBUG;DEBUGFULL;PROFILE)
-# We override CMAKE_CXX_FLAGS_${_CMAKE_BUILD_TYPE_UPPER} below. If the user
-# selects a CMAKE_BUILD_TYPE that is not handled by the logic below, we will
-# end up dropping the previous flags (e.g. those set in a cross-compilation
-# CMake toolchain file). To avoid surprising compilation errors, we emit an
-# error in that case, so that the user can handle the  passed CMAKE_BUILD_TYPE
-# in the compiler flags logic below.
-if (NOT "${_CMAKE_BUILD_TYPE_UPPER}" IN_LIST _known_build_types)
-  message(FATAL_ERROR "Unsupported CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
-endif()
 set(_save_cflags "${CMAKE_C_FLAGS}")
 set(_save_cxxflags "${CMAKE_CXX_FLAGS}")
 
