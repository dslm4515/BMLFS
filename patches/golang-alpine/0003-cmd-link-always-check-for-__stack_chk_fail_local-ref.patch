From 379e6fa10c844dfb210d3de361a14edf833074b2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=B6ren=20Tempel?= <soeren+git@soeren-tempel.net>
Date: Tue, 7 Feb 2023 08:17:03 +0100
Subject: [PATCH] cmd/link: always check for __stack_chk_fail_local references

Otherwise, tests with `-libgcc none` fail on x86.

See: https://github.com/golang/go/issues/58385
---
 src/cmd/link/internal/ld/lib.go | 40 ++++++++++++++++-----------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
index f593dcd895..d951e5f58a 100644
--- a/src/cmd/link/internal/ld/lib.go
+++ b/src/cmd/link/internal/ld/lib.go
@@ -630,26 +630,26 @@ func (ctxt *Link) loadlib() {
 			}
 			if *flagLibGCC != "none" {
 				hostArchive(ctxt, *flagLibGCC)
-				// For glibc systems, the linker setup used by GCC
-				// looks like
-				//
-				//  GROUP ( /lib/x86_64-linux-gnu/libc.so.6
-				//      /usr/lib/x86_64-linux-gnu/libc_nonshared.a
-				//      AS_NEEDED ( /lib64/ld-linux-x86-64.so.2 ) )
-				//
-				// where libc_nonshared.a contains a small set of
-				// symbols including "__stack_chk_fail_local" and a
-				// few others. Thus if we are doing internal linking
-				// and "__stack_chk_fail_local" is unresolved (most
-				// likely due to the use of -fstack-protector), try
-				// loading libc_nonshared.a to resolve it.
-				//
-				// On Alpine, the library is called libssp_nonshared.a.
-				isunresolved := symbolsAreUnresolved(ctxt, []string{"__stack_chk_fail_local"})
-				if isunresolved[0] {
-					if p := ctxt.findLibPath("libssp_nonshared.a"); p != "none" {
-						hostArchive(ctxt, p)
-					}
+			}
+			// For glibc systems, the linker setup used by GCC
+			// looks like
+			//
+			//  GROUP ( /lib/x86_64-linux-gnu/libc.so.6
+			//      /usr/lib/x86_64-linux-gnu/libc_nonshared.a
+			//      AS_NEEDED ( /lib64/ld-linux-x86-64.so.2 ) )
+			//
+			// where libc_nonshared.a contains a small set of
+			// symbols including "__stack_chk_fail_local" and a
+			// few others. Thus if we are doing internal linking
+			// and "__stack_chk_fail_local" is unresolved (most
+			// likely due to the use of -fstack-protector), try
+			// loading libc_nonshared.a to resolve it.
+			//
+			// On Alpine, the library is called libssp_nonshared.a.
+			isunresolved := symbolsAreUnresolved(ctxt, []string{"__stack_chk_fail_local"})
+			if isunresolved[0] {
+				if p := ctxt.findLibPath("libssp_nonshared.a"); p != "none" {
+					hostArchive(ctxt, p)
 				}
 			}
 		}
