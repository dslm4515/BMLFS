#! /bin/bash
#
## Rustc for i686
## Source: https://static.rust-lang.org/dist/rustc-1.47.0-src.tar.gz
## Method: Void Linux
##
## $BUILD = Directory to temporarily install
## $PKGS  = Directory to store built packages
##
## DEPS
## Required:     cURL, CMake, libssh2, libgit2
## Recommended:  LLVM
## Optional:     GDB
## *** NOTE ***
## This build needs precompiled Cargo and Rust to bootstrap build.
## Precompiled binaries and libraries are from Alpine, which has
## LLVM built with all targets like X86, ARM, etc.
##

## Create a build directory and extract source
mkidr rust-build2 && cd rust-build2 &&
tar xf ../rustc-1.47.0-src.tar.gz   &&
cd rustc-1.47.0-src

## Patch up the source to support musl
for p in  0006-Prefer-libgcc_eh-over-libunwind-for-musl alpine-move-py-scripts-to-share \
          alpine-target install-template-shebang link-musl-dynamically \
          musl-add-s390x-target musl-dont-use-crt-static musl-fix-linux_musl_base \
          need-rpath need-ssp_nonshared
do
patch -Np1 -i ../../patches/rustc-alpine-1.47.0/$p.patch
done

## A. Create bootstrap
# Download pacakges from Alpine
mkdir stage0/{bin,tmp} && cd stage0/tmp
wget \
        http://dl-cdn.alpinelinux.org/alpine/latest-stable/community/x86/cargo-1.47.0-r1.apk \
        http://dl-cdn.alpinelinux.org/alpine/edge/community/x86/rust-stdlib-1.47.0-r1.apk \
        http://dl-cdn.alpinelinux.org/alpine/edge/community/x86/rust-1.47.0-r1.apk
# unpack to extract cargo:
tar xf cargo-1.47.0-r1.apk &&
        mv -v usr/bin/cargo ../bin/ &&
        rm -rvf usr .PKGINFO .SIGN.RSA.alpine-*
# Unpack rust std library
tar xf rust-stdlib-1.47.0-r1.apk &&
        mv -v  usr/lib ../
        rm -rvf usr .PKGINFO .SIGN.RSA.alpine-*
# Unpack rust
tar xf rust-1.47.0-r1.apk   &&
        mv -v usr/bin/rustc ../bin/ &&
        mv -v usr/share ../         &&
        cp -r usr/lib/* ../lib/     &&
        rm -rvf usr .PKGINFO .SIGN.RSA.alpine-*
cd ../..

## B. if exists, Unpack bootstrap
tar xf ../../bootstraps/stage0-1.47.0-i586-alpine-linux-musl.tar.xz
mv stage0-1.47.0-i586-alpine-linux-musl stage0

# # Add compatability links for Cargo 1.47.0 from Alpine with libreSSL 3.0.0
sudo ln -sv libssl.so.48.0.1    /usr/lib/libssl.so.1.1
sudo ln -sv libcrypto.so.46.0.1 /usr/lib/libcrypto.so.1.1

# # Bootsrapping  will look for musl-gcc, just link it
sudo ln -sv gcc /usr/bin/musl-gcc

# # Add bootstrap to PATH
export PATH="$PWD/stage0/bin:$PATH"

# # Set paths
export _build="i586-alpine-linux-musl"
export _target="i686-unknown-linux-musl"
export _rlibdir="lib/rustlib/$_build/lib"
export _sharedir="share/rust"
export ldpath="$PWD/stage0/$_rlibdir"
export LD_LIBRARY_PATH="$PWD/stage0/lib:$ldpath"
export RUST_BACKTRACE=1

for f in  libc;
do
        sed -i 's/\("files":{\)[^}]*/\1/' vendor/$f/.cargo-checksum.json
done

sed -i /LD_LIBRARY_PATH/d src/bootstrap/bootstrap.py
rm -Rf src/llvm-project/

export CFLAGS="$CFLAGS -fno-stack-protector"
export PKG_CONFIG_ALLOW_CROSS=1

# Configure source
./configure \
        --build="$_build" \
        --host="$_target" \
        --target="$_target" \
        --prefix="/usr" \
        --release-channel="stable" \
        --enable-local-rust \
        --local-rust-root="${PWD}/stage0" \
        --llvm-root="/usr/lib" \
        --disable-docs \
        --enable-extended \
        --tools="analysis,cargo,src" \
        --enable-llvm-link-shared \
        --enable-option-checking \
        --enable-locked-deps \
        --enable-vendor \
        --python="python3" \
        --set="rust.musl-root=/usr" \
        --set="target.$_target.llvm-config=/usr/bin/llvm-config" \
        --set="target.$_target.musl-root=/usr" \
        --set="target.$_target.crt-static=false" \
        --set="target.$_build.musl-root=/usr" \
        --set="target.$_build.crt-static=false" \
        --set="target.$_build.cc=gcc" \
        --set="target.$_build.cxx=c++" \
        --set="target.$_build.ar=ar" \
        --set="target.$_build.linker=gcc"

sed 's/#deny-warnings = .*/deny-warnings = false/' -i config.toml
sed 's|deny(warnings,|deny(|' -i src/bootstrap/lib.rs

# ** Check config.toml that this is set correctly: **
# llvm-config=/usr/bin/llvm-config

# # BUILD IT!
python3  ./x.py build --jobs 4

# If not using any package manager:
#sudo -E -S DESTDIR=${PWD}/install python3 ./x.py install
#chown -R root:root install
#cp -a install/* /

sudo -E -S DESTDIR="${BUILD}" python3 ./x.py install -v &&
cd $BUILD && sudo -S mkdir -v ${BUILD}/install &&
cat > /tmp/slack-desc << "EOF"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.
# Line up the first '|' above the ':' following the base package name, and
# the '|' on the right side marks the last column you can put a character in.
# You must make exactly 11 lines for the formatting to be correct. It's also
# customary to leave one space after the ':' except on otherwise blank lines.

     |-----handy-ruler------------------------------------------------------|
rustc: rustc (a safe, concurrent, practical language)
rustc:
rustc: Rust is a curly-brace, block-structured expression language.
rustc: Its design is oriented toward concerns of "programming in the large",
rustc: that is, of creating and maintaining boundaries - both abstract and
rustc: operational - that preserve large-system integrity, availability,
rustc: and concurrency.
rustc:
rustc: Homepage: https://rust-lang.org
rustc:
rustc:
EOF
sudo -S mv -v /tmp/slack-desc install/    &&
sudo -S mv -v usr/lib/rustlib/etc usr/share/ &&
cd usr/lib/rustlib/ &&
sudo -S rm -v components install.log manifest-* rust-installer-version uninstall.sh
cd - &&
 
sudo -S makepkg -l y -c n $PKGS/rustc-1.47.0-$(uname -m)-mlfs.txz &&
sudo -S rm -rf ${BUILD}/* &&

# Remove compatiblility links for build and reset environemt
sudo rm -v /usr/lib/libssl.so.1.1  /usr/lib/libcrypto.so.1.1 /usr/bin/musl-gcc &&
unset RUST_BACKTRACE CFLAGS LD_LIBRARY_PATH ARCH _sharedir &&
unset ldpath RUSTFLAGS _build _rlibdir PKG_CONFIG_ALLOW_CROSS &&
export PATH=$OLD_PATH
