#! /bin/bash

# LLVM 20 
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/llvm-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/clang-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/compiler-rt-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/lld-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/libunwind-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/third-party-20.1.6.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/cmake-20.1.6.src.tar.xz
#
# $BUILD = Directory to temporarily install
# $PKGS  = Directory to store built packages
#
# DEPS
# Required:     cmake
# Recommended:  NONE
# Optional:     doxygen git graphviz libxml2 Pygments rsync texlive/install-tl-unx  valgrind

export PVER="20.1.6"

# Apply patches from ALpine Linux
patch -Np2 -i ../patches/llvm20-alpine/0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch 
patch -Np2 -i ../patches/llvm20-alpine/fix-memory-mf_exec-on-aarch64.patch
patch -Np2 -i ../patches/llvm20-alpine/llvm-stack-size.patch 
patch -Np2 -i ../patches/llvm20-alpine/reopt-arm.patch 
patch -Np2 -i ../patches/llvm20-alpine/install-prefix.patch 

# Per Alpine Linux: Known broken test on musl
rm -v test/CodeGen/AArch64/wineh4.mir

# Per Alpine Linux: https://github.com/llvm/llvm-project/issues/47657
rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

case $(uname -m) in
	x86_64*)   export BARCH="X86"
		   export B_TARGETS="AMDGPU"
		   export B_TRUPLE="x86_64-pc-linux-musl"
		   ;;
	i686*)     export BARCH="X86"
		   export B_TARGETS="AMDGPU"
		   export B_TRUPLE="i686-pc-linux-musl"
		   ;;
	aarch64*)  export BARCH="AArch64"
		   export B_TARGETS="AArch64;ARM"
		   export B_TRUPLE="aarch64-pc-linux-musl-musleabihf"
		   ;;
	arm*)      export BARCH="ARM"
		   export B_TARGETS="ARM"
		   export B_TRUPLE="armv7-pc-linux-musl-musleabi" # may need adjustment
		   ;;

# Per ALpine Linux:
# Archs that do not build the X86 target above need to
# have llvm-debuginfo-analyzer tests disabled due to:
# https://github.com/llvm/llvm-project/issues/106876

case $(uname -m) in
	aarch64*)  rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/01-wasm-compare-logical-elements.test
		   rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/01-wasm-select-logical-elements.test 
		   rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/03-wasm-incorrect-lexical-scope-typedef.test 
		   rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/04-wasm-missing-nested-enumerators.test 
		   rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/05-wasm-incorrect-lexical-scope-variable.test
		   ;;
	armv7*|x86*)   rm -v test/tools/llvm-size/radix.test
		;;
	armhf*)    rm -v test/tools/llvm-size/radix.test test/ExecutionEngine/MCJIT/frem.ll
		;;
esac

# Upack two additional tarballs that are needed by the LLVM build
# system:
tar -xf ../pkgs/cmake-20.1.6.src.tar.xz                              &&
tar -xf ../pkgs/third-party-20.1.6.src.tar.xz                        &&
sed '/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-20.1.6.src@' -i CMakeLists.txt                                                &&
sed '/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-20.1.6.src@' -i cmake/modules/HandleLLVMOptions.cmake

# Unpack clang source tree:
tar -xf ../pkgs/clang-20.1.6.src.tar.xz -C tools &&
mv tools/clang-20.1.6.src tools/clang

# Unpack compiler-rt source tree:
tar -xf ../pkgs/compiler-rt-20.1.6.src.tar.xz -C projects    &&
mv projects/compiler-rt-20.1.6.src projects/compiler-rt

# Optionally, unpack lld source tree to build LLD
tar -xf ../pkgs/lld-20.1.6.src.tar.xz -C tools &&
mv tools/lld-20.1.6.src tools/lld

# If building LLD, fix missing header for lld, 
# https://bugs.llvm.org/show_bug.cgi?id=49228
tar xf ../pkgs/libunwind-20.1.6.src.tar.xz libunwind-20.1.6.src/include/mach-o/compact_unwind_encoding.h 
mv libunwind-20.1.6.src/include/mach-o tools/lld/include/
rm -rf libunwind-20.1.6.src

# Per LFS, There are many Python scripts in this package which 
# use /usr/bin/env python to access the system Python which on 
# MLFS is Python3. Use the following 
# command to fix these scripts: 
grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

# Per LFS, ensure installing the FileCheck program which is 
# needed by the test suite of some packages (for example rustc):
sed 's/utility/tool/' -i utils/FileCheck/CMakeLists.txt 

# Vastly reduce size of debugging symbols:
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1"

# Set the configure options:
export  CARGS="-DLLVM_ENABLE_FFI=ON "
export CARGS+="-DCMAKE_BUILD_TYPE=Release "
export CARGS+="-DLLVM_BUILD_LLVM_DYLIB=ON "
export CARGS+="-DLLVM_LINK_LLVM_DYLIB=ON "
export CARGS+="-DLLVM_BUILD_TESTS=OFF "
export CARGS+="-DLLVM_INSTALL_UTILS=ON "
export CARGS+="-DLLVM_ENABLE_EH=ON "

# Build LLVM with run-time type information. Required for building Mesa
export CARGS+="-DLLVM_ENABLE_RTTI=ON "

# Disable generation build targets for the LLVM benchmarks. Requires additional 
# code that is not currently available
export CARGS+="-DLLVM_INCLUDE_BENCHMARKS=OFF "

# Per LFS, make -fpie option the default when compiling programs. Together 
# with the ASLR feature enabled in the kernel, this defeats some kind of attacks 
# based on known memory layouts. 
export CARGS+="-DCLANG_DEFAULT_PIE_ON_LINUX=ON "

# Disable building documentation & examples
export CARGS+="-DLLVM_BUILD_DOCS=OFF -DLLVM_BUILD_EXAMPLES=OFF "
export CARGS+="-DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_ENABLE_SPHINX=OFF "

# Avoid need for libexecinfo:
export CARGS+="-DCOMPILER_RT_BUILD_GWP_ASAN=OFF "

# Configure source to use gcc
CC=gcc CXX=g++ \
cmake -B OUT -DCMAKE_INSTALL_PREFIX=/usr \
             -DLLVM_BINUTILS_INCDIR="/usr/include" \
	     -DLLVM_TARGET_ARCH=${BARCH} \
	     -DLLVM_TARGETS_TO_BUILD="host;BPF;${B_TARGETS}" \
	     -DLLVM_HOST_TRIPLE="${B_TRUPLE}" \
	     -DLLVM_DEFAULT_TARGET_TRIPLE="${B_TRUPLE}" \
	     -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="${B_TRUPLE}" \
	     $CARGS -Wno-dev -G Ninja 

read -p "Compile?" && ninja -j2 -C OUT && \

# Install to staging directory without debugging symbols
sudo DESTDIR=$BUILD cmake --install OUT --strip
sudo python3 utils/lit/setup.py install --root=$BUILD

cd $BUILD && sudo mkdir -v install &&
cat > /tmp/slack-desc << "EOF"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in.  You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':' except on otherwise blank lines.

    |-----handy-ruler------------------------------------------------------|
llvm: llvm (LLVM compiler toolkit)
llvm:
llvm: Low Level Virtual Machine is a toolkit for the construction of highly
llvm: optimized compilers, optimizers, and runtime environments.
llvm:
llvm: This package also includes the clang frontend for the C family of
llvm: languages:  C, C++, Objective-C, and Objective-C++
llvm:
llvm:
llvm: Homepage: http://llvm.org/
llvm:
EOF
sudo mv /tmp/slack-desc install/ &&

sudo mkdir -pv /BMAN/usr/share && \
sudo mv usr/share/man /BMAN/usr/share && \

# Create package
sudo makepkg -l y -c n $PKGS/llvm-$PVER-$PSUFFIX &&
cd /BMAN && \
sudo mkdir -pv install && \
cat > /tmp/slack-desc << "EOF"
llvm-doc: Manpages for  llvm (LLVM compiler toolkit)
llvm-doc:
llvm-doc: Low Level Virtual Machine is a toolkit for the construction of highly
llvm-doc: optimized compilers, optimizers, and runtime environments.
llvm-doc:
llvm-doc:  http://llvm.org/
llvm-doc:
EOF
sudo mv /tmp/slack-desc install/ && \

sudo makepkg -l y -c n $PKGS/llvm-doc-$PVER-$PSUFFIX &&
sudo rm -rf $BUILD/* /BMAN/*
